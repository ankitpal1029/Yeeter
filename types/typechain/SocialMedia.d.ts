/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SocialMediaInterface extends ethers.utils.Interface {
  functions: {
    "allPosts()": FunctionFragment;
    "post((address,string))": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "allPosts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [{ posterAddress: string; ipfsLink: string }]
  ): string;

  decodeFunctionResult(functionFragment: "allPosts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;

  events: {
    "PostAppended(tuple,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PostAppended"): EventFragment;
}

export type PostAppendedEvent = TypedEvent<
  [
    [string, string] & { posterAddress: string; ipfsLink: string },
    ([string, string] & { posterAddress: string; ipfsLink: string })[]
  ] & {
    _newPost: [string, string] & { posterAddress: string; ipfsLink: string };
    _allPosts: ([string, string] & {
      posterAddress: string;
      ipfsLink: string;
    })[];
  }
>;

export class SocialMedia extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SocialMediaInterface;

  functions: {
    allPosts(
      overrides?: CallOverrides
    ): Promise<
      [([string, string] & { posterAddress: string; ipfsLink: string })[]]
    >;

    post(
      _newPost: { posterAddress: string; ipfsLink: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allPosts(
    overrides?: CallOverrides
  ): Promise<
    ([string, string] & { posterAddress: string; ipfsLink: string })[]
  >;

  post(
    _newPost: { posterAddress: string; ipfsLink: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allPosts(
      overrides?: CallOverrides
    ): Promise<
      ([string, string] & { posterAddress: string; ipfsLink: string })[]
    >;

    post(
      _newPost: { posterAddress: string; ipfsLink: string },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PostAppended(tuple,tuple[])"(
      _newPost?: null,
      _allPosts?: null
    ): TypedEventFilter<
      [
        [string, string] & { posterAddress: string; ipfsLink: string },
        ([string, string] & { posterAddress: string; ipfsLink: string })[]
      ],
      {
        _newPost: [string, string] & {
          posterAddress: string;
          ipfsLink: string;
        };
        _allPosts: ([string, string] & {
          posterAddress: string;
          ipfsLink: string;
        })[];
      }
    >;

    PostAppended(
      _newPost?: null,
      _allPosts?: null
    ): TypedEventFilter<
      [
        [string, string] & { posterAddress: string; ipfsLink: string },
        ([string, string] & { posterAddress: string; ipfsLink: string })[]
      ],
      {
        _newPost: [string, string] & {
          posterAddress: string;
          ipfsLink: string;
        };
        _allPosts: ([string, string] & {
          posterAddress: string;
          ipfsLink: string;
        })[];
      }
    >;
  };

  estimateGas: {
    allPosts(overrides?: CallOverrides): Promise<BigNumber>;

    post(
      _newPost: { posterAddress: string; ipfsLink: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allPosts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    post(
      _newPost: { posterAddress: string; ipfsLink: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
